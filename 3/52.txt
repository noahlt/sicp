To make things easier, I calculated out the ultimate values of all the streams in this problem:

stream-enumerate-interval:   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
   seq / stream-map accum:   1   3   6  10  15  21  28  36  45  55  66  78  91 105 120 136 153 171 190 210
  y / stream-filter even?:   6  10  28  36  66  78 120 136 190 210
  z / stream-filter seq%5:  10  15  45  55 105 120 190 210




(define sum 0)

; sum = 0

(define (accum x)
  (set! sum (+ x sum))
  sum)

; sum = 0

(define seq (stream-map accum (stream-enumerate-interval 1 20)))

; seq = 1 ...
; sum = 1

(define y (stream-filter even? seq))

; seq = 1 3 6 ...
;   y = 6 ...
; sum = 6

(define z (stream-filter (lambda (x) (= (remainder x 5) 0)) seq))

; seq = 1 3 6 10 ...
;   z = 10 ...
; sum = 10

(stream-ref y 7)

-> 120
; seq = 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 ...
;   y = 6 10 28 36 66 78 120 136 ...
; sum = 136

(display-stream z)
10
15
45
55
105
120
190
210
; seq = 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 ...
;   z = 6 10 28 36 66 78 120 (end of stream)
; sum = 120


These answers would change without the memoization optimization because when we call (display-stream z) we go ‘back’ to the value 10 in seq and recalculate each of the following values in z and seq.  But the value of sum would already be 120, the result of calculating seq to 120, so we would add values to sum again, changing the following values of seq.


