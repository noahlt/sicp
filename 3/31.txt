In our example, we have a half-adder with input-1, input-2, sum, and carry wires attached.  


Using the accept-action-procedure! that immediately calls the action being set, we get this behavior:

> (half-adder input-1 input-2 sum carry)
ok
> set-signal! input-1 1)
done
> (propagate)
sum 8 New-value = 1
done
> (set-signal! input-2 1)
done
> (propagate)
carry 11 New-value = 1
sum 16 New-value = 0
done

If accept-action-procedure! didn’t immediately call the action being set, we’d get this instead:

> (half-adder input-1 input-2 sum carry)
ok
> set-signal! input-1 1)
done
> (propagate)
done

The key is that we have to propagate the signals all the way through the system once, so that the inverter sets the signal on wire E to 1.  We guarantee this by immediately running each action procedure as its component is added to the wire.  If we don’t do this, wire E will never be set to 1, since setting just A (and not B) to 1 doesn’t change the signal on C and therefore doesn’t cause the inverter’s action procedure to set the signal on E to 1.

One way around this is simply to have propagate call every component’s action procedure regardless of whether its input signals changed.  But that’s very inefficient and gets complicated quickly: when should you run the action procedures of a component when none of its input signals have been changed?  I suppose one solution would just be to have propagate call every component’s action procedure _before_ any input signals change, but then you’d have to make set-signal! delay setting its wire’s value until after propagate is called, which means wire’s implementation would have to depend on agenda.  On the whole, that round seems complicated and tricky.
